<?php

# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings


# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
        exit;
}

$wgSitename         = "%(wikiname)s";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath       = "";
$wgScriptExtension  = ".php";






## The protocol and server name to use in fully-qualified URLs
$wgServer           = "http://%(hostname)s";

## The relative URL path to the skins directory
$wgStylePath        = "$wgScriptPath/skins";

## The relative URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo             = "$wgStylePath/common/images/wiki.png";

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO


$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;


$wgEmergencyContact = "%(email)s";
$wgPasswordSender   = "%(email)s";


# If PHP's memory limit is very low, some operations may fail.
ini_set( 'memory_limit', '200M' );




## Database settings

$wgDBadminuser      = '%(wikiAdminuser)s';
$wgDBadminpassword  = '%(wikiAdminpass)s';

$wgDBtype           = "mysql";
$wgDBserver         = "%(dbserver)s";
$wgDBname           = "%(dbname)s";
$wgDBuser           = "%(wikiuser)s";
$wgDBpassword       = "%(userpassword)s";

# MySQL specific settings
$wgDBprefix         = "";


# MySQL table options to use during installation or update
#$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=utf8";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();


## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publically accessible from the web.
#$wgCacheDirectory = "$IP/cache";

$wgLocalInterwiki   = strtolower( $wgSitename );

$wgLanguageCode = "en";

$wgSecretKey = "3567eydrtg6ydhg4ysehtysehdrfuy434352912982189734sehxrctfu5dtrjytfy5dutuy";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = 'vector';



## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );


$wgShowExceptionDetails = true;


require_once( "$IP/extensions/ParserFunctions/ParserFunctions.php" );

require_once( "$IP/extensions/ConfirmEdit/ConfirmEdit.php" );
require_once( "$IP/extensions/ConfirmEdit/QuestyCaptcha.php" );
$wgCaptchaClass = 'QuestyCaptcha';
$wgCaptchaQuestions[] = array( 'question' => "captcha question not yet set. I'm thinking of a number. ", 'answer' => "58398348734" );
$wgCaptchaQuestions[] = array( 'question' => "how many editors does it take to screw in a lightbulb", 'answer' => "3341" );

//These were no longer effective against spammers
//require_once( "$IP/extensions/recaptcha/ReCaptcha.php" );
//// Sign up for these at http://recaptcha.net/api/getkey
//// amazonaws.com keys
//$recaptcha_public_key = '634567898765445678987654345678765';
//$recaptcha_private_key = '6456787654345678765434567654345Mp';



// Fix the default captcha behaviour
$wgGroupPermissions['*'            ]['skipcaptcha'] = false;
$wgGroupPermissions['user'         ]['skipcaptcha'] = true;
$wgGroupPermissions['autoconfirmed']['skipcaptcha'] = true;
$wgGroupPermissions['bot'          ]['skipcaptcha'] = true; // registered bots
$wgGroupPermissions['sysop'        ]['skipcaptcha'] = true;


$wgCaptchaTriggers['edit']          = true;
$wgCaptchaTriggers['create']        = true;
$wgCaptchaTriggers['addurl']        = true;  // Check on edits that add URLs
$wgCaptchaTriggers['createaccount'] = true;



$wgUseAjax = true;


#require_once( "$IP/extensions/Validator/Validator.php" );
require_once( "$IP/extensions/SemanticBundle/SemanticBundleSettings.php" );
require_once( "$IP/extensions/SemanticBundle/SemanticBundle.php" );
#include_once("$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php");
#enableSemantics('mysite.com');


$smwgAdminRefreshStore = true;

$smwgEnableTemplateSupport = true;



include_once("$IP/extensions/SemanticForms/SemanticForms.php");
include_once("$IP/extensions/SemanticResultFormats/SemanticResultFormats.php");
#include_once("$IP/extensions/SemanticInternalObjects/SemanticInternalObjects.php");

include_once("$IP/extensions/SemanticDrilldown/SemanticDrilldown.php");
$sdgHideCategoriesByDefault = true;
$sdgFiltersSmallestFontSize=9;
$sdgFiltersLargestFontSize=25;


#$wgJobRunRate = 0.01;

$wgFileExtensions = array( 'png', 'jpg', 'jpeg', 'ppt','ogg','pdf');

$wgNamespacesWithSubpages[NS_MAIN] = true;






require_once( "$IP/extensions/ReplaceText/ReplaceText.php" );

$wgGroupPermissions['sysop']['replacetext'] = true;



$wgDisableCounters = true;

#$wgShowExceptionDetails = true;

$wgShowIPinHeader = false;

//require_once( "$IP/extensions/TitleBlacklist/TitleBlacklist.php" );

$wgSpamRegex = "/worldselectshop|ameritrust|truthaboutabsreviewscam|findthisall.com|YesMyBride|vistastemcell/";

require_once("$IP/extensions/Survey/Survey.php" );
require_once("$IP/extensions/Nuke/Nuke.php");





#require_once( "$IP/extensions/googleAnalytics/googleAnalytics.php" );
#$wgGoogleAnalyticsAccount = "UA-123456-7";
#$wgGoogleAnalyticsIgnoreBots = false;
#$wgGoogleAnalyticsAddASAC = true;




#$wgDebugLogFile = '/tmp/mwlog.txt';
#$wgShowExceptionDetails = true;

# necessary for bot semanticforms writes
#$wgParserConf['preprocessorClass'] = 'Preprocessor_Hash';


